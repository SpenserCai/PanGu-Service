// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pangu_service_rpc.proto
#ifndef GRPC_pangu_5fservice_5frpc_2eproto__INCLUDED
#define GRPC_pangu_5fservice_5frpc_2eproto__INCLUDED

#include "pangu_service_rpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace pangu_service_rpc {

class PanGuModuleService final {
 public:
  static constexpr char const* service_full_name() {
    return "pangu_service_rpc.PanGuModuleService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetModuleList(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::pangu_service_rpc::ModuleList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pangu_service_rpc::ModuleList>> AsyncGetModuleList(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pangu_service_rpc::ModuleList>>(AsyncGetModuleListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pangu_service_rpc::ModuleList>> PrepareAsyncGetModuleList(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pangu_service_rpc::ModuleList>>(PrepareAsyncGetModuleListRaw(context, request, cq));
    }
    virtual ::grpc::Status CallModuleInterface(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleCallRequest& request, ::pangu_service_rpc::ModuleCallResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pangu_service_rpc::ModuleCallResponse>> AsyncCallModuleInterface(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleCallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pangu_service_rpc::ModuleCallResponse>>(AsyncCallModuleInterfaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pangu_service_rpc::ModuleCallResponse>> PrepareAsyncCallModuleInterface(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleCallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pangu_service_rpc::ModuleCallResponse>>(PrepareAsyncCallModuleInterfaceRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateModule(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleUpdateRequest& request, ::pangu_service_rpc::ModuleUpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pangu_service_rpc::ModuleUpdateResponse>> AsyncUpdateModule(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pangu_service_rpc::ModuleUpdateResponse>>(AsyncUpdateModuleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pangu_service_rpc::ModuleUpdateResponse>> PrepareAsyncUpdateModule(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pangu_service_rpc::ModuleUpdateResponse>>(PrepareAsyncUpdateModuleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::pangu_service_rpc::ModuleRunningDataResponse>> SyncModuleRunningData(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::pangu_service_rpc::ModuleRunningDataResponse>>(SyncModuleRunningDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pangu_service_rpc::ModuleRunningDataResponse>> AsyncSyncModuleRunningData(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pangu_service_rpc::ModuleRunningDataResponse>>(AsyncSyncModuleRunningDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pangu_service_rpc::ModuleRunningDataResponse>> PrepareAsyncSyncModuleRunningData(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::pangu_service_rpc::ModuleRunningDataResponse>>(PrepareAsyncSyncModuleRunningDataRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetModuleList(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest* request, ::pangu_service_rpc::ModuleList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetModuleList(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest* request, ::pangu_service_rpc::ModuleList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CallModuleInterface(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleCallRequest* request, ::pangu_service_rpc::ModuleCallResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CallModuleInterface(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleCallRequest* request, ::pangu_service_rpc::ModuleCallResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateModule(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleUpdateRequest* request, ::pangu_service_rpc::ModuleUpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateModule(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleUpdateRequest* request, ::pangu_service_rpc::ModuleUpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SyncModuleRunningData(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest* request, ::grpc::ClientReadReactor< ::pangu_service_rpc::ModuleRunningDataResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pangu_service_rpc::ModuleList>* AsyncGetModuleListRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pangu_service_rpc::ModuleList>* PrepareAsyncGetModuleListRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pangu_service_rpc::ModuleCallResponse>* AsyncCallModuleInterfaceRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleCallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pangu_service_rpc::ModuleCallResponse>* PrepareAsyncCallModuleInterfaceRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleCallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pangu_service_rpc::ModuleUpdateResponse>* AsyncUpdateModuleRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pangu_service_rpc::ModuleUpdateResponse>* PrepareAsyncUpdateModuleRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::pangu_service_rpc::ModuleRunningDataResponse>* SyncModuleRunningDataRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pangu_service_rpc::ModuleRunningDataResponse>* AsyncSyncModuleRunningDataRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::pangu_service_rpc::ModuleRunningDataResponse>* PrepareAsyncSyncModuleRunningDataRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetModuleList(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::pangu_service_rpc::ModuleList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleList>> AsyncGetModuleList(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleList>>(AsyncGetModuleListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleList>> PrepareAsyncGetModuleList(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleList>>(PrepareAsyncGetModuleListRaw(context, request, cq));
    }
    ::grpc::Status CallModuleInterface(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleCallRequest& request, ::pangu_service_rpc::ModuleCallResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleCallResponse>> AsyncCallModuleInterface(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleCallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleCallResponse>>(AsyncCallModuleInterfaceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleCallResponse>> PrepareAsyncCallModuleInterface(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleCallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleCallResponse>>(PrepareAsyncCallModuleInterfaceRaw(context, request, cq));
    }
    ::grpc::Status UpdateModule(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleUpdateRequest& request, ::pangu_service_rpc::ModuleUpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleUpdateResponse>> AsyncUpdateModule(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleUpdateResponse>>(AsyncUpdateModuleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleUpdateResponse>> PrepareAsyncUpdateModule(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleUpdateResponse>>(PrepareAsyncUpdateModuleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::pangu_service_rpc::ModuleRunningDataResponse>> SyncModuleRunningData(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::pangu_service_rpc::ModuleRunningDataResponse>>(SyncModuleRunningDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pangu_service_rpc::ModuleRunningDataResponse>> AsyncSyncModuleRunningData(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pangu_service_rpc::ModuleRunningDataResponse>>(AsyncSyncModuleRunningDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::pangu_service_rpc::ModuleRunningDataResponse>> PrepareAsyncSyncModuleRunningData(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::pangu_service_rpc::ModuleRunningDataResponse>>(PrepareAsyncSyncModuleRunningDataRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetModuleList(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest* request, ::pangu_service_rpc::ModuleList* response, std::function<void(::grpc::Status)>) override;
      void GetModuleList(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest* request, ::pangu_service_rpc::ModuleList* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CallModuleInterface(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleCallRequest* request, ::pangu_service_rpc::ModuleCallResponse* response, std::function<void(::grpc::Status)>) override;
      void CallModuleInterface(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleCallRequest* request, ::pangu_service_rpc::ModuleCallResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateModule(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleUpdateRequest* request, ::pangu_service_rpc::ModuleUpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateModule(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleUpdateRequest* request, ::pangu_service_rpc::ModuleUpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SyncModuleRunningData(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest* request, ::grpc::ClientReadReactor< ::pangu_service_rpc::ModuleRunningDataResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleList>* AsyncGetModuleListRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleList>* PrepareAsyncGetModuleListRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleCallResponse>* AsyncCallModuleInterfaceRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleCallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleCallResponse>* PrepareAsyncCallModuleInterfaceRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleCallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleUpdateResponse>* AsyncUpdateModuleRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleUpdateResponse>* PrepareAsyncUpdateModuleRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::pangu_service_rpc::ModuleRunningDataResponse>* SyncModuleRunningDataRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request) override;
    ::grpc::ClientAsyncReader< ::pangu_service_rpc::ModuleRunningDataResponse>* AsyncSyncModuleRunningDataRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::pangu_service_rpc::ModuleRunningDataResponse>* PrepareAsyncSyncModuleRunningDataRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetModuleList_;
    const ::grpc::internal::RpcMethod rpcmethod_CallModuleInterface_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateModule_;
    const ::grpc::internal::RpcMethod rpcmethod_SyncModuleRunningData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetModuleList(::grpc::ServerContext* context, const ::pangu_service_rpc::NullRequest* request, ::pangu_service_rpc::ModuleList* response);
    virtual ::grpc::Status CallModuleInterface(::grpc::ServerContext* context, const ::pangu_service_rpc::ModuleCallRequest* request, ::pangu_service_rpc::ModuleCallResponse* response);
    virtual ::grpc::Status UpdateModule(::grpc::ServerContext* context, const ::pangu_service_rpc::ModuleUpdateRequest* request, ::pangu_service_rpc::ModuleUpdateResponse* response);
    virtual ::grpc::Status SyncModuleRunningData(::grpc::ServerContext* context, const ::pangu_service_rpc::NullRequest* request, ::grpc::ServerWriter< ::pangu_service_rpc::ModuleRunningDataResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetModuleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetModuleList() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetModuleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModuleList(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::NullRequest* /*request*/, ::pangu_service_rpc::ModuleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModuleList(::grpc::ServerContext* context, ::pangu_service_rpc::NullRequest* request, ::grpc::ServerAsyncResponseWriter< ::pangu_service_rpc::ModuleList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CallModuleInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CallModuleInterface() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CallModuleInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallModuleInterface(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::ModuleCallRequest* /*request*/, ::pangu_service_rpc::ModuleCallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallModuleInterface(::grpc::ServerContext* context, ::pangu_service_rpc::ModuleCallRequest* request, ::grpc::ServerAsyncResponseWriter< ::pangu_service_rpc::ModuleCallResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateModule() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateModule(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::ModuleUpdateRequest* /*request*/, ::pangu_service_rpc::ModuleUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateModule(::grpc::ServerContext* context, ::pangu_service_rpc::ModuleUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::pangu_service_rpc::ModuleUpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SyncModuleRunningData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SyncModuleRunningData() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SyncModuleRunningData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncModuleRunningData(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::NullRequest* /*request*/, ::grpc::ServerWriter< ::pangu_service_rpc::ModuleRunningDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSyncModuleRunningData(::grpc::ServerContext* context, ::pangu_service_rpc::NullRequest* request, ::grpc::ServerAsyncWriter< ::pangu_service_rpc::ModuleRunningDataResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetModuleList<WithAsyncMethod_CallModuleInterface<WithAsyncMethod_UpdateModule<WithAsyncMethod_SyncModuleRunningData<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetModuleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetModuleList() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::pangu_service_rpc::NullRequest, ::pangu_service_rpc::ModuleList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pangu_service_rpc::NullRequest* request, ::pangu_service_rpc::ModuleList* response) { return this->GetModuleList(context, request, response); }));}
    void SetMessageAllocatorFor_GetModuleList(
        ::grpc::MessageAllocator< ::pangu_service_rpc::NullRequest, ::pangu_service_rpc::ModuleList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pangu_service_rpc::NullRequest, ::pangu_service_rpc::ModuleList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetModuleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModuleList(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::NullRequest* /*request*/, ::pangu_service_rpc::ModuleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModuleList(
      ::grpc::CallbackServerContext* /*context*/, const ::pangu_service_rpc::NullRequest* /*request*/, ::pangu_service_rpc::ModuleList* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CallModuleInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CallModuleInterface() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::pangu_service_rpc::ModuleCallRequest, ::pangu_service_rpc::ModuleCallResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pangu_service_rpc::ModuleCallRequest* request, ::pangu_service_rpc::ModuleCallResponse* response) { return this->CallModuleInterface(context, request, response); }));}
    void SetMessageAllocatorFor_CallModuleInterface(
        ::grpc::MessageAllocator< ::pangu_service_rpc::ModuleCallRequest, ::pangu_service_rpc::ModuleCallResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pangu_service_rpc::ModuleCallRequest, ::pangu_service_rpc::ModuleCallResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CallModuleInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallModuleInterface(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::ModuleCallRequest* /*request*/, ::pangu_service_rpc::ModuleCallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CallModuleInterface(
      ::grpc::CallbackServerContext* /*context*/, const ::pangu_service_rpc::ModuleCallRequest* /*request*/, ::pangu_service_rpc::ModuleCallResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateModule() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::pangu_service_rpc::ModuleUpdateRequest, ::pangu_service_rpc::ModuleUpdateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pangu_service_rpc::ModuleUpdateRequest* request, ::pangu_service_rpc::ModuleUpdateResponse* response) { return this->UpdateModule(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateModule(
        ::grpc::MessageAllocator< ::pangu_service_rpc::ModuleUpdateRequest, ::pangu_service_rpc::ModuleUpdateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::pangu_service_rpc::ModuleUpdateRequest, ::pangu_service_rpc::ModuleUpdateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateModule(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::ModuleUpdateRequest* /*request*/, ::pangu_service_rpc::ModuleUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateModule(
      ::grpc::CallbackServerContext* /*context*/, const ::pangu_service_rpc::ModuleUpdateRequest* /*request*/, ::pangu_service_rpc::ModuleUpdateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SyncModuleRunningData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SyncModuleRunningData() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::pangu_service_rpc::NullRequest, ::pangu_service_rpc::ModuleRunningDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::pangu_service_rpc::NullRequest* request) { return this->SyncModuleRunningData(context, request); }));
    }
    ~WithCallbackMethod_SyncModuleRunningData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncModuleRunningData(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::NullRequest* /*request*/, ::grpc::ServerWriter< ::pangu_service_rpc::ModuleRunningDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::pangu_service_rpc::ModuleRunningDataResponse>* SyncModuleRunningData(
      ::grpc::CallbackServerContext* /*context*/, const ::pangu_service_rpc::NullRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetModuleList<WithCallbackMethod_CallModuleInterface<WithCallbackMethod_UpdateModule<WithCallbackMethod_SyncModuleRunningData<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetModuleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetModuleList() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetModuleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModuleList(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::NullRequest* /*request*/, ::pangu_service_rpc::ModuleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CallModuleInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CallModuleInterface() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CallModuleInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallModuleInterface(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::ModuleCallRequest* /*request*/, ::pangu_service_rpc::ModuleCallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateModule() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateModule(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::ModuleUpdateRequest* /*request*/, ::pangu_service_rpc::ModuleUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SyncModuleRunningData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SyncModuleRunningData() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SyncModuleRunningData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncModuleRunningData(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::NullRequest* /*request*/, ::grpc::ServerWriter< ::pangu_service_rpc::ModuleRunningDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetModuleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetModuleList() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetModuleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModuleList(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::NullRequest* /*request*/, ::pangu_service_rpc::ModuleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetModuleList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CallModuleInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CallModuleInterface() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CallModuleInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallModuleInterface(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::ModuleCallRequest* /*request*/, ::pangu_service_rpc::ModuleCallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallModuleInterface(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateModule() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateModule(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::ModuleUpdateRequest* /*request*/, ::pangu_service_rpc::ModuleUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateModule(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SyncModuleRunningData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SyncModuleRunningData() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SyncModuleRunningData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncModuleRunningData(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::NullRequest* /*request*/, ::grpc::ServerWriter< ::pangu_service_rpc::ModuleRunningDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSyncModuleRunningData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetModuleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetModuleList() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetModuleList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetModuleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetModuleList(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::NullRequest* /*request*/, ::pangu_service_rpc::ModuleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetModuleList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CallModuleInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CallModuleInterface() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CallModuleInterface(context, request, response); }));
    }
    ~WithRawCallbackMethod_CallModuleInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallModuleInterface(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::ModuleCallRequest* /*request*/, ::pangu_service_rpc::ModuleCallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CallModuleInterface(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateModule() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateModule(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateModule(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::ModuleUpdateRequest* /*request*/, ::pangu_service_rpc::ModuleUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateModule(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SyncModuleRunningData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SyncModuleRunningData() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SyncModuleRunningData(context, request); }));
    }
    ~WithRawCallbackMethod_SyncModuleRunningData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SyncModuleRunningData(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::NullRequest* /*request*/, ::grpc::ServerWriter< ::pangu_service_rpc::ModuleRunningDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SyncModuleRunningData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetModuleList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetModuleList() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pangu_service_rpc::NullRequest, ::pangu_service_rpc::ModuleList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pangu_service_rpc::NullRequest, ::pangu_service_rpc::ModuleList>* streamer) {
                       return this->StreamedGetModuleList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetModuleList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetModuleList(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::NullRequest* /*request*/, ::pangu_service_rpc::ModuleList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetModuleList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pangu_service_rpc::NullRequest,::pangu_service_rpc::ModuleList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CallModuleInterface : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CallModuleInterface() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pangu_service_rpc::ModuleCallRequest, ::pangu_service_rpc::ModuleCallResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pangu_service_rpc::ModuleCallRequest, ::pangu_service_rpc::ModuleCallResponse>* streamer) {
                       return this->StreamedCallModuleInterface(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CallModuleInterface() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CallModuleInterface(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::ModuleCallRequest* /*request*/, ::pangu_service_rpc::ModuleCallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCallModuleInterface(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pangu_service_rpc::ModuleCallRequest,::pangu_service_rpc::ModuleCallResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateModule() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::pangu_service_rpc::ModuleUpdateRequest, ::pangu_service_rpc::ModuleUpdateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::pangu_service_rpc::ModuleUpdateRequest, ::pangu_service_rpc::ModuleUpdateResponse>* streamer) {
                       return this->StreamedUpdateModule(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateModule(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::ModuleUpdateRequest* /*request*/, ::pangu_service_rpc::ModuleUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateModule(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pangu_service_rpc::ModuleUpdateRequest,::pangu_service_rpc::ModuleUpdateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetModuleList<WithStreamedUnaryMethod_CallModuleInterface<WithStreamedUnaryMethod_UpdateModule<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SyncModuleRunningData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SyncModuleRunningData() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::pangu_service_rpc::NullRequest, ::pangu_service_rpc::ModuleRunningDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::pangu_service_rpc::NullRequest, ::pangu_service_rpc::ModuleRunningDataResponse>* streamer) {
                       return this->StreamedSyncModuleRunningData(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SyncModuleRunningData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SyncModuleRunningData(::grpc::ServerContext* /*context*/, const ::pangu_service_rpc::NullRequest* /*request*/, ::grpc::ServerWriter< ::pangu_service_rpc::ModuleRunningDataResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSyncModuleRunningData(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::pangu_service_rpc::NullRequest,::pangu_service_rpc::ModuleRunningDataResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SyncModuleRunningData<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetModuleList<WithStreamedUnaryMethod_CallModuleInterface<WithStreamedUnaryMethod_UpdateModule<WithSplitStreamingMethod_SyncModuleRunningData<Service > > > > StreamedService;
};

}  // namespace pangu_service_rpc


#endif  // GRPC_pangu_5fservice_5frpc_2eproto__INCLUDED
