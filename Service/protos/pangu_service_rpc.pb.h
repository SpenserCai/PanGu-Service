// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pangu_service_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pangu_5fservice_5frpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pangu_5fservice_5frpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pangu_5fservice_5frpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pangu_5fservice_5frpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pangu_5fservice_5frpc_2eproto;
namespace pangu_service_rpc {
class BoolResponse;
struct BoolResponseDefaultTypeInternal;
extern BoolResponseDefaultTypeInternal _BoolResponse_default_instance_;
class ModuleCallRequest;
struct ModuleCallRequestDefaultTypeInternal;
extern ModuleCallRequestDefaultTypeInternal _ModuleCallRequest_default_instance_;
class ModuleCallResponse;
struct ModuleCallResponseDefaultTypeInternal;
extern ModuleCallResponseDefaultTypeInternal _ModuleCallResponse_default_instance_;
class ModuleList;
struct ModuleListDefaultTypeInternal;
extern ModuleListDefaultTypeInternal _ModuleList_default_instance_;
class ModuleList_ModuleItem;
struct ModuleList_ModuleItemDefaultTypeInternal;
extern ModuleList_ModuleItemDefaultTypeInternal _ModuleList_ModuleItem_default_instance_;
class ModuleRunningDataResponse;
struct ModuleRunningDataResponseDefaultTypeInternal;
extern ModuleRunningDataResponseDefaultTypeInternal _ModuleRunningDataResponse_default_instance_;
class ModuleUpdateRequest;
struct ModuleUpdateRequestDefaultTypeInternal;
extern ModuleUpdateRequestDefaultTypeInternal _ModuleUpdateRequest_default_instance_;
class ModuleUpdateResponse;
struct ModuleUpdateResponseDefaultTypeInternal;
extern ModuleUpdateResponseDefaultTypeInternal _ModuleUpdateResponse_default_instance_;
class NullRequest;
struct NullRequestDefaultTypeInternal;
extern NullRequestDefaultTypeInternal _NullRequest_default_instance_;
}  // namespace pangu_service_rpc
PROTOBUF_NAMESPACE_OPEN
template<> ::pangu_service_rpc::BoolResponse* Arena::CreateMaybeMessage<::pangu_service_rpc::BoolResponse>(Arena*);
template<> ::pangu_service_rpc::ModuleCallRequest* Arena::CreateMaybeMessage<::pangu_service_rpc::ModuleCallRequest>(Arena*);
template<> ::pangu_service_rpc::ModuleCallResponse* Arena::CreateMaybeMessage<::pangu_service_rpc::ModuleCallResponse>(Arena*);
template<> ::pangu_service_rpc::ModuleList* Arena::CreateMaybeMessage<::pangu_service_rpc::ModuleList>(Arena*);
template<> ::pangu_service_rpc::ModuleList_ModuleItem* Arena::CreateMaybeMessage<::pangu_service_rpc::ModuleList_ModuleItem>(Arena*);
template<> ::pangu_service_rpc::ModuleRunningDataResponse* Arena::CreateMaybeMessage<::pangu_service_rpc::ModuleRunningDataResponse>(Arena*);
template<> ::pangu_service_rpc::ModuleUpdateRequest* Arena::CreateMaybeMessage<::pangu_service_rpc::ModuleUpdateRequest>(Arena*);
template<> ::pangu_service_rpc::ModuleUpdateResponse* Arena::CreateMaybeMessage<::pangu_service_rpc::ModuleUpdateResponse>(Arena*);
template<> ::pangu_service_rpc::NullRequest* Arena::CreateMaybeMessage<::pangu_service_rpc::NullRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pangu_service_rpc {

// ===================================================================

class BoolResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pangu_service_rpc.BoolResponse) */ {
 public:
  inline BoolResponse() : BoolResponse(nullptr) {}
  ~BoolResponse() override;
  explicit constexpr BoolResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoolResponse(const BoolResponse& from);
  BoolResponse(BoolResponse&& from) noexcept
    : BoolResponse() {
    *this = ::std::move(from);
  }

  inline BoolResponse& operator=(const BoolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolResponse& operator=(BoolResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoolResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoolResponse* internal_default_instance() {
    return reinterpret_cast<const BoolResponse*>(
               &_BoolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BoolResponse& a, BoolResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoolResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoolResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoolResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoolResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoolResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoolResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pangu_service_rpc.BoolResponse";
  }
  protected:
  explicit BoolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bool value = 1;
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pangu_service_rpc.BoolResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pangu_5fservice_5frpc_2eproto;
};
// -------------------------------------------------------------------

class NullRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:pangu_service_rpc.NullRequest) */ {
 public:
  inline NullRequest() : NullRequest(nullptr) {}
  explicit constexpr NullRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NullRequest(const NullRequest& from);
  NullRequest(NullRequest&& from) noexcept
    : NullRequest() {
    *this = ::std::move(from);
  }

  inline NullRequest& operator=(const NullRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NullRequest& operator=(NullRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NullRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NullRequest* internal_default_instance() {
    return reinterpret_cast<const NullRequest*>(
               &_NullRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NullRequest& a, NullRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NullRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NullRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NullRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NullRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const NullRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const NullRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pangu_service_rpc.NullRequest";
  }
  protected:
  explicit NullRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pangu_service_rpc.NullRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pangu_5fservice_5frpc_2eproto;
};
// -------------------------------------------------------------------

class ModuleCallRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pangu_service_rpc.ModuleCallRequest) */ {
 public:
  inline ModuleCallRequest() : ModuleCallRequest(nullptr) {}
  ~ModuleCallRequest() override;
  explicit constexpr ModuleCallRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleCallRequest(const ModuleCallRequest& from);
  ModuleCallRequest(ModuleCallRequest&& from) noexcept
    : ModuleCallRequest() {
    *this = ::std::move(from);
  }

  inline ModuleCallRequest& operator=(const ModuleCallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleCallRequest& operator=(ModuleCallRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleCallRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleCallRequest* internal_default_instance() {
    return reinterpret_cast<const ModuleCallRequest*>(
               &_ModuleCallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ModuleCallRequest& a, ModuleCallRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleCallRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleCallRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleCallRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleCallRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleCallRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleCallRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleCallRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pangu_service_rpc.ModuleCallRequest";
  }
  protected:
  explicit ModuleCallRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleNameFieldNumber = 1,
    kFuncNameFieldNumber = 2,
    kFuncArgsFieldNumber = 3,
  };
  // string module_name = 1;
  void clear_module_name();
  const std::string& module_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_module_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_module_name();
  PROTOBUF_NODISCARD std::string* release_module_name();
  void set_allocated_module_name(std::string* module_name);
  private:
  const std::string& _internal_module_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module_name(const std::string& value);
  std::string* _internal_mutable_module_name();
  public:

  // string func_name = 2;
  void clear_func_name();
  const std::string& func_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_func_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_func_name();
  PROTOBUF_NODISCARD std::string* release_func_name();
  void set_allocated_func_name(std::string* func_name);
  private:
  const std::string& _internal_func_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_func_name(const std::string& value);
  std::string* _internal_mutable_func_name();
  public:

  // string func_args = 3;
  void clear_func_args();
  const std::string& func_args() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_func_args(ArgT0&& arg0, ArgT... args);
  std::string* mutable_func_args();
  PROTOBUF_NODISCARD std::string* release_func_args();
  void set_allocated_func_args(std::string* func_args);
  private:
  const std::string& _internal_func_args() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_func_args(const std::string& value);
  std::string* _internal_mutable_func_args();
  public:

  // @@protoc_insertion_point(class_scope:pangu_service_rpc.ModuleCallRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr func_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr func_args_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pangu_5fservice_5frpc_2eproto;
};
// -------------------------------------------------------------------

class ModuleList_ModuleItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pangu_service_rpc.ModuleList.ModuleItem) */ {
 public:
  inline ModuleList_ModuleItem() : ModuleList_ModuleItem(nullptr) {}
  ~ModuleList_ModuleItem() override;
  explicit constexpr ModuleList_ModuleItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleList_ModuleItem(const ModuleList_ModuleItem& from);
  ModuleList_ModuleItem(ModuleList_ModuleItem&& from) noexcept
    : ModuleList_ModuleItem() {
    *this = ::std::move(from);
  }

  inline ModuleList_ModuleItem& operator=(const ModuleList_ModuleItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleList_ModuleItem& operator=(ModuleList_ModuleItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleList_ModuleItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleList_ModuleItem* internal_default_instance() {
    return reinterpret_cast<const ModuleList_ModuleItem*>(
               &_ModuleList_ModuleItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ModuleList_ModuleItem& a, ModuleList_ModuleItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleList_ModuleItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleList_ModuleItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleList_ModuleItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleList_ModuleItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleList_ModuleItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleList_ModuleItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleList_ModuleItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pangu_service_rpc.ModuleList.ModuleItem";
  }
  protected:
  explicit ModuleList_ModuleItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFuncListFieldNumber = 6,
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kAuthorFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // repeated string funcList = 6;
  int funclist_size() const;
  private:
  int _internal_funclist_size() const;
  public:
  void clear_funclist();
  const std::string& funclist(int index) const;
  std::string* mutable_funclist(int index);
  void set_funclist(int index, const std::string& value);
  void set_funclist(int index, std::string&& value);
  void set_funclist(int index, const char* value);
  void set_funclist(int index, const char* value, size_t size);
  std::string* add_funclist();
  void add_funclist(const std::string& value);
  void add_funclist(std::string&& value);
  void add_funclist(const char* value);
  void add_funclist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& funclist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_funclist();
  private:
  const std::string& _internal_funclist(int index) const;
  std::string* _internal_add_funclist();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string author = 4;
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // string type = 5;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:pangu_service_rpc.ModuleList.ModuleItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> funclist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pangu_5fservice_5frpc_2eproto;
};
// -------------------------------------------------------------------

class ModuleList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pangu_service_rpc.ModuleList) */ {
 public:
  inline ModuleList() : ModuleList(nullptr) {}
  ~ModuleList() override;
  explicit constexpr ModuleList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleList(const ModuleList& from);
  ModuleList(ModuleList&& from) noexcept
    : ModuleList() {
    *this = ::std::move(from);
  }

  inline ModuleList& operator=(const ModuleList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleList& operator=(ModuleList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleList* internal_default_instance() {
    return reinterpret_cast<const ModuleList*>(
               &_ModuleList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ModuleList& a, ModuleList& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pangu_service_rpc.ModuleList";
  }
  protected:
  explicit ModuleList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ModuleList_ModuleItem ModuleItem;

  // accessors -------------------------------------------------------

  enum : int {
    kModulesFieldNumber = 1,
  };
  // repeated .pangu_service_rpc.ModuleList.ModuleItem modules = 1;
  int modules_size() const;
  private:
  int _internal_modules_size() const;
  public:
  void clear_modules();
  ::pangu_service_rpc::ModuleList_ModuleItem* mutable_modules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pangu_service_rpc::ModuleList_ModuleItem >*
      mutable_modules();
  private:
  const ::pangu_service_rpc::ModuleList_ModuleItem& _internal_modules(int index) const;
  ::pangu_service_rpc::ModuleList_ModuleItem* _internal_add_modules();
  public:
  const ::pangu_service_rpc::ModuleList_ModuleItem& modules(int index) const;
  ::pangu_service_rpc::ModuleList_ModuleItem* add_modules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pangu_service_rpc::ModuleList_ModuleItem >&
      modules() const;

  // @@protoc_insertion_point(class_scope:pangu_service_rpc.ModuleList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pangu_service_rpc::ModuleList_ModuleItem > modules_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pangu_5fservice_5frpc_2eproto;
};
// -------------------------------------------------------------------

class ModuleUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pangu_service_rpc.ModuleUpdateRequest) */ {
 public:
  inline ModuleUpdateRequest() : ModuleUpdateRequest(nullptr) {}
  ~ModuleUpdateRequest() override;
  explicit constexpr ModuleUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleUpdateRequest(const ModuleUpdateRequest& from);
  ModuleUpdateRequest(ModuleUpdateRequest&& from) noexcept
    : ModuleUpdateRequest() {
    *this = ::std::move(from);
  }

  inline ModuleUpdateRequest& operator=(const ModuleUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleUpdateRequest& operator=(ModuleUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const ModuleUpdateRequest*>(
               &_ModuleUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ModuleUpdateRequest& a, ModuleUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleUpdateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pangu_service_rpc.ModuleUpdateRequest";
  }
  protected:
  explicit ModuleUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:pangu_service_rpc.ModuleUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pangu_5fservice_5frpc_2eproto;
};
// -------------------------------------------------------------------

class ModuleUpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pangu_service_rpc.ModuleUpdateResponse) */ {
 public:
  inline ModuleUpdateResponse() : ModuleUpdateResponse(nullptr) {}
  ~ModuleUpdateResponse() override;
  explicit constexpr ModuleUpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleUpdateResponse(const ModuleUpdateResponse& from);
  ModuleUpdateResponse(ModuleUpdateResponse&& from) noexcept
    : ModuleUpdateResponse() {
    *this = ::std::move(from);
  }

  inline ModuleUpdateResponse& operator=(const ModuleUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleUpdateResponse& operator=(ModuleUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleUpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const ModuleUpdateResponse*>(
               &_ModuleUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ModuleUpdateResponse& a, ModuleUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleUpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleUpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleUpdateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleUpdateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleUpdateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleUpdateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pangu_service_rpc.ModuleUpdateResponse";
  }
  protected:
  explicit ModuleUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pangu_service_rpc.ModuleUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pangu_5fservice_5frpc_2eproto;
};
// -------------------------------------------------------------------

class ModuleCallResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pangu_service_rpc.ModuleCallResponse) */ {
 public:
  inline ModuleCallResponse() : ModuleCallResponse(nullptr) {}
  ~ModuleCallResponse() override;
  explicit constexpr ModuleCallResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleCallResponse(const ModuleCallResponse& from);
  ModuleCallResponse(ModuleCallResponse&& from) noexcept
    : ModuleCallResponse() {
    *this = ::std::move(from);
  }

  inline ModuleCallResponse& operator=(const ModuleCallResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleCallResponse& operator=(ModuleCallResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleCallResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleCallResponse* internal_default_instance() {
    return reinterpret_cast<const ModuleCallResponse*>(
               &_ModuleCallResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ModuleCallResponse& a, ModuleCallResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleCallResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleCallResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleCallResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleCallResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleCallResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleCallResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleCallResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pangu_service_rpc.ModuleCallResponse";
  }
  protected:
  explicit ModuleCallResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // @@protoc_insertion_point(class_scope:pangu_service_rpc.ModuleCallResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pangu_5fservice_5frpc_2eproto;
};
// -------------------------------------------------------------------

class ModuleRunningDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pangu_service_rpc.ModuleRunningDataResponse) */ {
 public:
  inline ModuleRunningDataResponse() : ModuleRunningDataResponse(nullptr) {}
  ~ModuleRunningDataResponse() override;
  explicit constexpr ModuleRunningDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleRunningDataResponse(const ModuleRunningDataResponse& from);
  ModuleRunningDataResponse(ModuleRunningDataResponse&& from) noexcept
    : ModuleRunningDataResponse() {
    *this = ::std::move(from);
  }

  inline ModuleRunningDataResponse& operator=(const ModuleRunningDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleRunningDataResponse& operator=(ModuleRunningDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleRunningDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleRunningDataResponse* internal_default_instance() {
    return reinterpret_cast<const ModuleRunningDataResponse*>(
               &_ModuleRunningDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ModuleRunningDataResponse& a, ModuleRunningDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleRunningDataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleRunningDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleRunningDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleRunningDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleRunningDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleRunningDataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleRunningDataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pangu_service_rpc.ModuleRunningDataResponse";
  }
  protected:
  explicit ModuleRunningDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kContentFieldNumber = 3,
  };
  // string plugin_name = 1;
  void clear_plugin_name();
  const std::string& plugin_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plugin_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plugin_name();
  PROTOBUF_NODISCARD std::string* release_plugin_name();
  void set_allocated_plugin_name(std::string* plugin_name);
  private:
  const std::string& _internal_plugin_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plugin_name(const std::string& value);
  std::string* _internal_mutable_plugin_name();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string content = 3;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:pangu_service_rpc.ModuleRunningDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plugin_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pangu_5fservice_5frpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BoolResponse

// bool value = 1;
inline void BoolResponse::clear_value() {
  value_ = false;
}
inline bool BoolResponse::_internal_value() const {
  return value_;
}
inline bool BoolResponse::value() const {
  // @@protoc_insertion_point(field_get:pangu_service_rpc.BoolResponse.value)
  return _internal_value();
}
inline void BoolResponse::_internal_set_value(bool value) {
  
  value_ = value;
}
inline void BoolResponse::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:pangu_service_rpc.BoolResponse.value)
}

// -------------------------------------------------------------------

// NullRequest

// -------------------------------------------------------------------

// ModuleCallRequest

// string module_name = 1;
inline void ModuleCallRequest::clear_module_name() {
  module_name_.ClearToEmpty();
}
inline const std::string& ModuleCallRequest::module_name() const {
  // @@protoc_insertion_point(field_get:pangu_service_rpc.ModuleCallRequest.module_name)
  return _internal_module_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleCallRequest::set_module_name(ArgT0&& arg0, ArgT... args) {
 
 module_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pangu_service_rpc.ModuleCallRequest.module_name)
}
inline std::string* ModuleCallRequest::mutable_module_name() {
  std::string* _s = _internal_mutable_module_name();
  // @@protoc_insertion_point(field_mutable:pangu_service_rpc.ModuleCallRequest.module_name)
  return _s;
}
inline const std::string& ModuleCallRequest::_internal_module_name() const {
  return module_name_.Get();
}
inline void ModuleCallRequest::_internal_set_module_name(const std::string& value) {
  
  module_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModuleCallRequest::_internal_mutable_module_name() {
  
  return module_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModuleCallRequest::release_module_name() {
  // @@protoc_insertion_point(field_release:pangu_service_rpc.ModuleCallRequest.module_name)
  return module_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModuleCallRequest::set_allocated_module_name(std::string* module_name) {
  if (module_name != nullptr) {
    
  } else {
    
  }
  module_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (module_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    module_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pangu_service_rpc.ModuleCallRequest.module_name)
}

// string func_name = 2;
inline void ModuleCallRequest::clear_func_name() {
  func_name_.ClearToEmpty();
}
inline const std::string& ModuleCallRequest::func_name() const {
  // @@protoc_insertion_point(field_get:pangu_service_rpc.ModuleCallRequest.func_name)
  return _internal_func_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleCallRequest::set_func_name(ArgT0&& arg0, ArgT... args) {
 
 func_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pangu_service_rpc.ModuleCallRequest.func_name)
}
inline std::string* ModuleCallRequest::mutable_func_name() {
  std::string* _s = _internal_mutable_func_name();
  // @@protoc_insertion_point(field_mutable:pangu_service_rpc.ModuleCallRequest.func_name)
  return _s;
}
inline const std::string& ModuleCallRequest::_internal_func_name() const {
  return func_name_.Get();
}
inline void ModuleCallRequest::_internal_set_func_name(const std::string& value) {
  
  func_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModuleCallRequest::_internal_mutable_func_name() {
  
  return func_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModuleCallRequest::release_func_name() {
  // @@protoc_insertion_point(field_release:pangu_service_rpc.ModuleCallRequest.func_name)
  return func_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModuleCallRequest::set_allocated_func_name(std::string* func_name) {
  if (func_name != nullptr) {
    
  } else {
    
  }
  func_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), func_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (func_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    func_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pangu_service_rpc.ModuleCallRequest.func_name)
}

// string func_args = 3;
inline void ModuleCallRequest::clear_func_args() {
  func_args_.ClearToEmpty();
}
inline const std::string& ModuleCallRequest::func_args() const {
  // @@protoc_insertion_point(field_get:pangu_service_rpc.ModuleCallRequest.func_args)
  return _internal_func_args();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleCallRequest::set_func_args(ArgT0&& arg0, ArgT... args) {
 
 func_args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pangu_service_rpc.ModuleCallRequest.func_args)
}
inline std::string* ModuleCallRequest::mutable_func_args() {
  std::string* _s = _internal_mutable_func_args();
  // @@protoc_insertion_point(field_mutable:pangu_service_rpc.ModuleCallRequest.func_args)
  return _s;
}
inline const std::string& ModuleCallRequest::_internal_func_args() const {
  return func_args_.Get();
}
inline void ModuleCallRequest::_internal_set_func_args(const std::string& value) {
  
  func_args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModuleCallRequest::_internal_mutable_func_args() {
  
  return func_args_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModuleCallRequest::release_func_args() {
  // @@protoc_insertion_point(field_release:pangu_service_rpc.ModuleCallRequest.func_args)
  return func_args_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModuleCallRequest::set_allocated_func_args(std::string* func_args) {
  if (func_args != nullptr) {
    
  } else {
    
  }
  func_args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), func_args,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (func_args_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    func_args_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pangu_service_rpc.ModuleCallRequest.func_args)
}

// -------------------------------------------------------------------

// ModuleList_ModuleItem

// string name = 1;
inline void ModuleList_ModuleItem::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ModuleList_ModuleItem::name() const {
  // @@protoc_insertion_point(field_get:pangu_service_rpc.ModuleList.ModuleItem.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleList_ModuleItem::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pangu_service_rpc.ModuleList.ModuleItem.name)
}
inline std::string* ModuleList_ModuleItem::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pangu_service_rpc.ModuleList.ModuleItem.name)
  return _s;
}
inline const std::string& ModuleList_ModuleItem::_internal_name() const {
  return name_.Get();
}
inline void ModuleList_ModuleItem::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModuleList_ModuleItem::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModuleList_ModuleItem::release_name() {
  // @@protoc_insertion_point(field_release:pangu_service_rpc.ModuleList.ModuleItem.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModuleList_ModuleItem::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pangu_service_rpc.ModuleList.ModuleItem.name)
}

// string version = 2;
inline void ModuleList_ModuleItem::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& ModuleList_ModuleItem::version() const {
  // @@protoc_insertion_point(field_get:pangu_service_rpc.ModuleList.ModuleItem.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleList_ModuleItem::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pangu_service_rpc.ModuleList.ModuleItem.version)
}
inline std::string* ModuleList_ModuleItem::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:pangu_service_rpc.ModuleList.ModuleItem.version)
  return _s;
}
inline const std::string& ModuleList_ModuleItem::_internal_version() const {
  return version_.Get();
}
inline void ModuleList_ModuleItem::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModuleList_ModuleItem::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModuleList_ModuleItem::release_version() {
  // @@protoc_insertion_point(field_release:pangu_service_rpc.ModuleList.ModuleItem.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModuleList_ModuleItem::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pangu_service_rpc.ModuleList.ModuleItem.version)
}

// string description = 3;
inline void ModuleList_ModuleItem::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& ModuleList_ModuleItem::description() const {
  // @@protoc_insertion_point(field_get:pangu_service_rpc.ModuleList.ModuleItem.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleList_ModuleItem::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pangu_service_rpc.ModuleList.ModuleItem.description)
}
inline std::string* ModuleList_ModuleItem::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:pangu_service_rpc.ModuleList.ModuleItem.description)
  return _s;
}
inline const std::string& ModuleList_ModuleItem::_internal_description() const {
  return description_.Get();
}
inline void ModuleList_ModuleItem::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModuleList_ModuleItem::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModuleList_ModuleItem::release_description() {
  // @@protoc_insertion_point(field_release:pangu_service_rpc.ModuleList.ModuleItem.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModuleList_ModuleItem::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pangu_service_rpc.ModuleList.ModuleItem.description)
}

// string author = 4;
inline void ModuleList_ModuleItem::clear_author() {
  author_.ClearToEmpty();
}
inline const std::string& ModuleList_ModuleItem::author() const {
  // @@protoc_insertion_point(field_get:pangu_service_rpc.ModuleList.ModuleItem.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleList_ModuleItem::set_author(ArgT0&& arg0, ArgT... args) {
 
 author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pangu_service_rpc.ModuleList.ModuleItem.author)
}
inline std::string* ModuleList_ModuleItem::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:pangu_service_rpc.ModuleList.ModuleItem.author)
  return _s;
}
inline const std::string& ModuleList_ModuleItem::_internal_author() const {
  return author_.Get();
}
inline void ModuleList_ModuleItem::_internal_set_author(const std::string& value) {
  
  author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModuleList_ModuleItem::_internal_mutable_author() {
  
  return author_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModuleList_ModuleItem::release_author() {
  // @@protoc_insertion_point(field_release:pangu_service_rpc.ModuleList.ModuleItem.author)
  return author_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModuleList_ModuleItem::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    
  } else {
    
  }
  author_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), author,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (author_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    author_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pangu_service_rpc.ModuleList.ModuleItem.author)
}

// string type = 5;
inline void ModuleList_ModuleItem::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& ModuleList_ModuleItem::type() const {
  // @@protoc_insertion_point(field_get:pangu_service_rpc.ModuleList.ModuleItem.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleList_ModuleItem::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pangu_service_rpc.ModuleList.ModuleItem.type)
}
inline std::string* ModuleList_ModuleItem::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:pangu_service_rpc.ModuleList.ModuleItem.type)
  return _s;
}
inline const std::string& ModuleList_ModuleItem::_internal_type() const {
  return type_.Get();
}
inline void ModuleList_ModuleItem::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModuleList_ModuleItem::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModuleList_ModuleItem::release_type() {
  // @@protoc_insertion_point(field_release:pangu_service_rpc.ModuleList.ModuleItem.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModuleList_ModuleItem::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pangu_service_rpc.ModuleList.ModuleItem.type)
}

// repeated string funcList = 6;
inline int ModuleList_ModuleItem::_internal_funclist_size() const {
  return funclist_.size();
}
inline int ModuleList_ModuleItem::funclist_size() const {
  return _internal_funclist_size();
}
inline void ModuleList_ModuleItem::clear_funclist() {
  funclist_.Clear();
}
inline std::string* ModuleList_ModuleItem::add_funclist() {
  std::string* _s = _internal_add_funclist();
  // @@protoc_insertion_point(field_add_mutable:pangu_service_rpc.ModuleList.ModuleItem.funcList)
  return _s;
}
inline const std::string& ModuleList_ModuleItem::_internal_funclist(int index) const {
  return funclist_.Get(index);
}
inline const std::string& ModuleList_ModuleItem::funclist(int index) const {
  // @@protoc_insertion_point(field_get:pangu_service_rpc.ModuleList.ModuleItem.funcList)
  return _internal_funclist(index);
}
inline std::string* ModuleList_ModuleItem::mutable_funclist(int index) {
  // @@protoc_insertion_point(field_mutable:pangu_service_rpc.ModuleList.ModuleItem.funcList)
  return funclist_.Mutable(index);
}
inline void ModuleList_ModuleItem::set_funclist(int index, const std::string& value) {
  funclist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pangu_service_rpc.ModuleList.ModuleItem.funcList)
}
inline void ModuleList_ModuleItem::set_funclist(int index, std::string&& value) {
  funclist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pangu_service_rpc.ModuleList.ModuleItem.funcList)
}
inline void ModuleList_ModuleItem::set_funclist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  funclist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pangu_service_rpc.ModuleList.ModuleItem.funcList)
}
inline void ModuleList_ModuleItem::set_funclist(int index, const char* value, size_t size) {
  funclist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pangu_service_rpc.ModuleList.ModuleItem.funcList)
}
inline std::string* ModuleList_ModuleItem::_internal_add_funclist() {
  return funclist_.Add();
}
inline void ModuleList_ModuleItem::add_funclist(const std::string& value) {
  funclist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pangu_service_rpc.ModuleList.ModuleItem.funcList)
}
inline void ModuleList_ModuleItem::add_funclist(std::string&& value) {
  funclist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pangu_service_rpc.ModuleList.ModuleItem.funcList)
}
inline void ModuleList_ModuleItem::add_funclist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  funclist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pangu_service_rpc.ModuleList.ModuleItem.funcList)
}
inline void ModuleList_ModuleItem::add_funclist(const char* value, size_t size) {
  funclist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pangu_service_rpc.ModuleList.ModuleItem.funcList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModuleList_ModuleItem::funclist() const {
  // @@protoc_insertion_point(field_list:pangu_service_rpc.ModuleList.ModuleItem.funcList)
  return funclist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModuleList_ModuleItem::mutable_funclist() {
  // @@protoc_insertion_point(field_mutable_list:pangu_service_rpc.ModuleList.ModuleItem.funcList)
  return &funclist_;
}

// -------------------------------------------------------------------

// ModuleList

// repeated .pangu_service_rpc.ModuleList.ModuleItem modules = 1;
inline int ModuleList::_internal_modules_size() const {
  return modules_.size();
}
inline int ModuleList::modules_size() const {
  return _internal_modules_size();
}
inline void ModuleList::clear_modules() {
  modules_.Clear();
}
inline ::pangu_service_rpc::ModuleList_ModuleItem* ModuleList::mutable_modules(int index) {
  // @@protoc_insertion_point(field_mutable:pangu_service_rpc.ModuleList.modules)
  return modules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pangu_service_rpc::ModuleList_ModuleItem >*
ModuleList::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_list:pangu_service_rpc.ModuleList.modules)
  return &modules_;
}
inline const ::pangu_service_rpc::ModuleList_ModuleItem& ModuleList::_internal_modules(int index) const {
  return modules_.Get(index);
}
inline const ::pangu_service_rpc::ModuleList_ModuleItem& ModuleList::modules(int index) const {
  // @@protoc_insertion_point(field_get:pangu_service_rpc.ModuleList.modules)
  return _internal_modules(index);
}
inline ::pangu_service_rpc::ModuleList_ModuleItem* ModuleList::_internal_add_modules() {
  return modules_.Add();
}
inline ::pangu_service_rpc::ModuleList_ModuleItem* ModuleList::add_modules() {
  ::pangu_service_rpc::ModuleList_ModuleItem* _add = _internal_add_modules();
  // @@protoc_insertion_point(field_add:pangu_service_rpc.ModuleList.modules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pangu_service_rpc::ModuleList_ModuleItem >&
ModuleList::modules() const {
  // @@protoc_insertion_point(field_list:pangu_service_rpc.ModuleList.modules)
  return modules_;
}

// -------------------------------------------------------------------

// ModuleUpdateRequest

// string path = 1;
inline void ModuleUpdateRequest::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& ModuleUpdateRequest::path() const {
  // @@protoc_insertion_point(field_get:pangu_service_rpc.ModuleUpdateRequest.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleUpdateRequest::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pangu_service_rpc.ModuleUpdateRequest.path)
}
inline std::string* ModuleUpdateRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:pangu_service_rpc.ModuleUpdateRequest.path)
  return _s;
}
inline const std::string& ModuleUpdateRequest::_internal_path() const {
  return path_.Get();
}
inline void ModuleUpdateRequest::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModuleUpdateRequest::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModuleUpdateRequest::release_path() {
  // @@protoc_insertion_point(field_release:pangu_service_rpc.ModuleUpdateRequest.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModuleUpdateRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pangu_service_rpc.ModuleUpdateRequest.path)
}

// -------------------------------------------------------------------

// ModuleUpdateResponse

// bool status = 1;
inline void ModuleUpdateResponse::clear_status() {
  status_ = false;
}
inline bool ModuleUpdateResponse::_internal_status() const {
  return status_;
}
inline bool ModuleUpdateResponse::status() const {
  // @@protoc_insertion_point(field_get:pangu_service_rpc.ModuleUpdateResponse.status)
  return _internal_status();
}
inline void ModuleUpdateResponse::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ModuleUpdateResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:pangu_service_rpc.ModuleUpdateResponse.status)
}

// string msg = 2;
inline void ModuleUpdateResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& ModuleUpdateResponse::msg() const {
  // @@protoc_insertion_point(field_get:pangu_service_rpc.ModuleUpdateResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleUpdateResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pangu_service_rpc.ModuleUpdateResponse.msg)
}
inline std::string* ModuleUpdateResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:pangu_service_rpc.ModuleUpdateResponse.msg)
  return _s;
}
inline const std::string& ModuleUpdateResponse::_internal_msg() const {
  return msg_.Get();
}
inline void ModuleUpdateResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModuleUpdateResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModuleUpdateResponse::release_msg() {
  // @@protoc_insertion_point(field_release:pangu_service_rpc.ModuleUpdateResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModuleUpdateResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (msg_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pangu_service_rpc.ModuleUpdateResponse.msg)
}

// -------------------------------------------------------------------

// ModuleCallResponse

// string result = 1;
inline void ModuleCallResponse::clear_result() {
  result_.ClearToEmpty();
}
inline const std::string& ModuleCallResponse::result() const {
  // @@protoc_insertion_point(field_get:pangu_service_rpc.ModuleCallResponse.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleCallResponse::set_result(ArgT0&& arg0, ArgT... args) {
 
 result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pangu_service_rpc.ModuleCallResponse.result)
}
inline std::string* ModuleCallResponse::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:pangu_service_rpc.ModuleCallResponse.result)
  return _s;
}
inline const std::string& ModuleCallResponse::_internal_result() const {
  return result_.Get();
}
inline void ModuleCallResponse::_internal_set_result(const std::string& value) {
  
  result_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModuleCallResponse::_internal_mutable_result() {
  
  return result_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModuleCallResponse::release_result() {
  // @@protoc_insertion_point(field_release:pangu_service_rpc.ModuleCallResponse.result)
  return result_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModuleCallResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (result_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    result_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pangu_service_rpc.ModuleCallResponse.result)
}

// -------------------------------------------------------------------

// ModuleRunningDataResponse

// string plugin_name = 1;
inline void ModuleRunningDataResponse::clear_plugin_name() {
  plugin_name_.ClearToEmpty();
}
inline const std::string& ModuleRunningDataResponse::plugin_name() const {
  // @@protoc_insertion_point(field_get:pangu_service_rpc.ModuleRunningDataResponse.plugin_name)
  return _internal_plugin_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleRunningDataResponse::set_plugin_name(ArgT0&& arg0, ArgT... args) {
 
 plugin_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pangu_service_rpc.ModuleRunningDataResponse.plugin_name)
}
inline std::string* ModuleRunningDataResponse::mutable_plugin_name() {
  std::string* _s = _internal_mutable_plugin_name();
  // @@protoc_insertion_point(field_mutable:pangu_service_rpc.ModuleRunningDataResponse.plugin_name)
  return _s;
}
inline const std::string& ModuleRunningDataResponse::_internal_plugin_name() const {
  return plugin_name_.Get();
}
inline void ModuleRunningDataResponse::_internal_set_plugin_name(const std::string& value) {
  
  plugin_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModuleRunningDataResponse::_internal_mutable_plugin_name() {
  
  return plugin_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModuleRunningDataResponse::release_plugin_name() {
  // @@protoc_insertion_point(field_release:pangu_service_rpc.ModuleRunningDataResponse.plugin_name)
  return plugin_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModuleRunningDataResponse::set_allocated_plugin_name(std::string* plugin_name) {
  if (plugin_name != nullptr) {
    
  } else {
    
  }
  plugin_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plugin_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (plugin_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    plugin_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pangu_service_rpc.ModuleRunningDataResponse.plugin_name)
}

// string type = 2;
inline void ModuleRunningDataResponse::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& ModuleRunningDataResponse::type() const {
  // @@protoc_insertion_point(field_get:pangu_service_rpc.ModuleRunningDataResponse.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleRunningDataResponse::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pangu_service_rpc.ModuleRunningDataResponse.type)
}
inline std::string* ModuleRunningDataResponse::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:pangu_service_rpc.ModuleRunningDataResponse.type)
  return _s;
}
inline const std::string& ModuleRunningDataResponse::_internal_type() const {
  return type_.Get();
}
inline void ModuleRunningDataResponse::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModuleRunningDataResponse::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModuleRunningDataResponse::release_type() {
  // @@protoc_insertion_point(field_release:pangu_service_rpc.ModuleRunningDataResponse.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModuleRunningDataResponse::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pangu_service_rpc.ModuleRunningDataResponse.type)
}

// string content = 3;
inline void ModuleRunningDataResponse::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& ModuleRunningDataResponse::content() const {
  // @@protoc_insertion_point(field_get:pangu_service_rpc.ModuleRunningDataResponse.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleRunningDataResponse::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pangu_service_rpc.ModuleRunningDataResponse.content)
}
inline std::string* ModuleRunningDataResponse::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:pangu_service_rpc.ModuleRunningDataResponse.content)
  return _s;
}
inline const std::string& ModuleRunningDataResponse::_internal_content() const {
  return content_.Get();
}
inline void ModuleRunningDataResponse::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModuleRunningDataResponse::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModuleRunningDataResponse::release_content() {
  // @@protoc_insertion_point(field_release:pangu_service_rpc.ModuleRunningDataResponse.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModuleRunningDataResponse::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pangu_service_rpc.ModuleRunningDataResponse.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pangu_service_rpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pangu_5fservice_5frpc_2eproto
