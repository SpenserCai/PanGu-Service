// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pangu_service_rpc.proto

#include "pangu_service_rpc.pb.h"
#include "pangu_service_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pangu_service_rpc {

static const char* PanGuModuleService_method_names[] = {
  "/pangu_service_rpc.PanGuModuleService/GetModuleList",
  "/pangu_service_rpc.PanGuModuleService/CallModuleInterface",
  "/pangu_service_rpc.PanGuModuleService/UpdateModule",
  "/pangu_service_rpc.PanGuModuleService/SyncModuleRunningData",
};

std::unique_ptr< PanGuModuleService::Stub> PanGuModuleService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PanGuModuleService::Stub> stub(new PanGuModuleService::Stub(channel, options));
  return stub;
}

PanGuModuleService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetModuleList_(PanGuModuleService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CallModuleInterface_(PanGuModuleService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateModule_(PanGuModuleService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SyncModuleRunningData_(PanGuModuleService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status PanGuModuleService::Stub::GetModuleList(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::pangu_service_rpc::ModuleList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pangu_service_rpc::NullRequest, ::pangu_service_rpc::ModuleList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetModuleList_, context, request, response);
}

void PanGuModuleService::Stub::async::GetModuleList(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest* request, ::pangu_service_rpc::ModuleList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pangu_service_rpc::NullRequest, ::pangu_service_rpc::ModuleList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModuleList_, context, request, response, std::move(f));
}

void PanGuModuleService::Stub::async::GetModuleList(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest* request, ::pangu_service_rpc::ModuleList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModuleList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleList>* PanGuModuleService::Stub::PrepareAsyncGetModuleListRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pangu_service_rpc::ModuleList, ::pangu_service_rpc::NullRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetModuleList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleList>* PanGuModuleService::Stub::AsyncGetModuleListRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetModuleListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PanGuModuleService::Stub::CallModuleInterface(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleCallRequest& request, ::pangu_service_rpc::ModuleCallResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pangu_service_rpc::ModuleCallRequest, ::pangu_service_rpc::ModuleCallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CallModuleInterface_, context, request, response);
}

void PanGuModuleService::Stub::async::CallModuleInterface(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleCallRequest* request, ::pangu_service_rpc::ModuleCallResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pangu_service_rpc::ModuleCallRequest, ::pangu_service_rpc::ModuleCallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CallModuleInterface_, context, request, response, std::move(f));
}

void PanGuModuleService::Stub::async::CallModuleInterface(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleCallRequest* request, ::pangu_service_rpc::ModuleCallResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CallModuleInterface_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleCallResponse>* PanGuModuleService::Stub::PrepareAsyncCallModuleInterfaceRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleCallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pangu_service_rpc::ModuleCallResponse, ::pangu_service_rpc::ModuleCallRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CallModuleInterface_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleCallResponse>* PanGuModuleService::Stub::AsyncCallModuleInterfaceRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleCallRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCallModuleInterfaceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PanGuModuleService::Stub::UpdateModule(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleUpdateRequest& request, ::pangu_service_rpc::ModuleUpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::pangu_service_rpc::ModuleUpdateRequest, ::pangu_service_rpc::ModuleUpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateModule_, context, request, response);
}

void PanGuModuleService::Stub::async::UpdateModule(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleUpdateRequest* request, ::pangu_service_rpc::ModuleUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::pangu_service_rpc::ModuleUpdateRequest, ::pangu_service_rpc::ModuleUpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateModule_, context, request, response, std::move(f));
}

void PanGuModuleService::Stub::async::UpdateModule(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleUpdateRequest* request, ::pangu_service_rpc::ModuleUpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateModule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleUpdateResponse>* PanGuModuleService::Stub::PrepareAsyncUpdateModuleRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::pangu_service_rpc::ModuleUpdateResponse, ::pangu_service_rpc::ModuleUpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateModule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::pangu_service_rpc::ModuleUpdateResponse>* PanGuModuleService::Stub::AsyncUpdateModuleRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::ModuleUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateModuleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::pangu_service_rpc::ModuleRunningDataResponse>* PanGuModuleService::Stub::SyncModuleRunningDataRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::pangu_service_rpc::ModuleRunningDataResponse>::Create(channel_.get(), rpcmethod_SyncModuleRunningData_, context, request);
}

void PanGuModuleService::Stub::async::SyncModuleRunningData(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest* request, ::grpc::ClientReadReactor< ::pangu_service_rpc::ModuleRunningDataResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::pangu_service_rpc::ModuleRunningDataResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SyncModuleRunningData_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::pangu_service_rpc::ModuleRunningDataResponse>* PanGuModuleService::Stub::AsyncSyncModuleRunningDataRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::pangu_service_rpc::ModuleRunningDataResponse>::Create(channel_.get(), cq, rpcmethod_SyncModuleRunningData_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::pangu_service_rpc::ModuleRunningDataResponse>* PanGuModuleService::Stub::PrepareAsyncSyncModuleRunningDataRaw(::grpc::ClientContext* context, const ::pangu_service_rpc::NullRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::pangu_service_rpc::ModuleRunningDataResponse>::Create(channel_.get(), cq, rpcmethod_SyncModuleRunningData_, context, request, false, nullptr);
}

PanGuModuleService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PanGuModuleService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PanGuModuleService::Service, ::pangu_service_rpc::NullRequest, ::pangu_service_rpc::ModuleList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PanGuModuleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pangu_service_rpc::NullRequest* req,
             ::pangu_service_rpc::ModuleList* resp) {
               return service->GetModuleList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PanGuModuleService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PanGuModuleService::Service, ::pangu_service_rpc::ModuleCallRequest, ::pangu_service_rpc::ModuleCallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PanGuModuleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pangu_service_rpc::ModuleCallRequest* req,
             ::pangu_service_rpc::ModuleCallResponse* resp) {
               return service->CallModuleInterface(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PanGuModuleService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PanGuModuleService::Service, ::pangu_service_rpc::ModuleUpdateRequest, ::pangu_service_rpc::ModuleUpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PanGuModuleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pangu_service_rpc::ModuleUpdateRequest* req,
             ::pangu_service_rpc::ModuleUpdateResponse* resp) {
               return service->UpdateModule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PanGuModuleService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< PanGuModuleService::Service, ::pangu_service_rpc::NullRequest, ::pangu_service_rpc::ModuleRunningDataResponse>(
          [](PanGuModuleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::pangu_service_rpc::NullRequest* req,
             ::grpc::ServerWriter<::pangu_service_rpc::ModuleRunningDataResponse>* writer) {
               return service->SyncModuleRunningData(ctx, req, writer);
             }, this)));
}

PanGuModuleService::Service::~Service() {
}

::grpc::Status PanGuModuleService::Service::GetModuleList(::grpc::ServerContext* context, const ::pangu_service_rpc::NullRequest* request, ::pangu_service_rpc::ModuleList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PanGuModuleService::Service::CallModuleInterface(::grpc::ServerContext* context, const ::pangu_service_rpc::ModuleCallRequest* request, ::pangu_service_rpc::ModuleCallResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PanGuModuleService::Service::UpdateModule(::grpc::ServerContext* context, const ::pangu_service_rpc::ModuleUpdateRequest* request, ::pangu_service_rpc::ModuleUpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PanGuModuleService::Service::SyncModuleRunningData(::grpc::ServerContext* context, const ::pangu_service_rpc::NullRequest* request, ::grpc::ServerWriter< ::pangu_service_rpc::ModuleRunningDataResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pangu_service_rpc

